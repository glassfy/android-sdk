import io.glassfy.androidsdk.Configuration

// Create variables with empty default values
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''
ext["sonatypeStagingProfileId"] = ''
ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.key"] = ''
ext["snapshot"] = ''


File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    // Read local.properties file first if it exists
    Properties p = new Properties()
    new FileInputStream(secretPropsFile).withCloseable { is -> p.load(is) }
    p.each { name, value -> ext[name] = value }
}
// Use system environment variables
ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME') ?: ext["ossrhUsername"]
ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD') ?: ext["ossrhPassword"]
ext["sonatypeStagingProfileId"] = System.getenv('SONATYPE_STAGING_PROFILE_ID') ?: ext["sonatypeStagingProfileId"]
ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID') ?: ext["signing.keyId"]
ext["signing.password"] = System.getenv('SIGNING_PASSWORD') ?: ext["signing.password"]
ext["signing.key"] = System.getenv('SIGNING_KEY') ?: ext["signing.key"]
ext["snapshot"] = System.getenv('SNAPSHOT') ?: ext["snapshot"]

if (snapshot) {
    ext["rootVersionName"] = Configuration.snapshotVersionName
} else {
    ext["rootVersionName"] = Configuration.versionName
}

// Set up Sonatype repository
nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))    //https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))

            stagingProfileId = sonatypeStagingProfileId
            username = ossrhUsername
            password = ossrhPassword
            version = rootVersionName
        }
    }
}


/* kts
// Create variables with empty default values
extra.apply {
    set("ossrhUsername", "")
    set("ossrhPassword" ,"")
    set("sonatypeStagingProfileId","")
    set("signing.keyId" ,"")
    set("signing.password" ,"")
    set("signing.key" ,"")
    set("snapshot" ,"")
}

val secretPropsFile = File("${project.rootProject}/local.properties")
if (secretPropsFile.exists()) {
    java.util.Properties().apply {
        load(java.io.FileInputStream(secretPropsFile))
    }.forEach { name, value -> extra[name as String] = value }
}

// Use system environment variables
extra["ossrhUsername"] = System.getenv("OSSRH_USERNAME") ?: extra["ossrhUsername"]
extra["ossrhPassword"] = System.getenv("OSSRH_PASSWORD") ?: extra["ossrhPassword"]
extra["sonatypeStagingProfileId"] = System.getenv("SONATYPE_STAGING_PROFILE_ID") ?: extra["sonatypeStagingProfileId"]
extra["signing.keyId"] = System.getenv("SIGNING_KEY_ID") ?: extra["signing.keyId"]
extra["signing.password"] = System.getenv("SIGNING_PASSWORD") ?: extra["signing.password"]
extra["signing.key"] = System.getenv("SIGNING_KEY") ?: extra["signing.key"]
extra["snapshot"] = System.getenv("SNAPSHOT") ?: extra["snapshot"]

if (extra["snapshot"] != null) {
    extra["rootVersionName"] = Configuration.snapshotVersionName
} else {
    extra["rootVersionName"] = Configuration.versionName
}
*/